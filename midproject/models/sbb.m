;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Simple Baseball sbb.m;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;sudo random function for generating resulted ball-type
(define (fiz-random)
	(let ((base (random 100)))
		 (cond 
		 	((< base 70) 'strike)
			((and (> base 69)(< base 80)) 'four-ball)
			((and (> base 79)(< base 90)) 'single-hit)
			((and (> base 89)(< base 97)) 'double-hit)
			((and (> base 96)(< base 99)) 'triple-hit)
			((and (> base 95)(< base 100)) 'home-run)
		 )
	)	
);define
(define (siz-random)
	(let ((base (random 100)))
		 (cond 
		 	((< base 60) 'strike)
			((and (> base 59)(< base 80)) 'ball)
			((and (> base 79)(< base 90)) 'single-hit)
			((and (> base 89)(< base 97)) 'double-hit)
			((and (> base 96)(< base 99)) 'triple-hit)
			((and (> base 98)(< base 100)) 'home-run)
		 )
	)	
);define
(define (foz-random)
	(let ((base (random 100)))
		 (cond 
		 	((< base 50) 'ball)
			((and (> base 49)(< base 80)) 'strike)
			((and (> base 70)(< base 90)) 'four-ball)
			((and (> base 89)(< base 95)) 'single-hit)
			((and (> base 94)(< base 98)) 'double-hit)
			((and (> base 97)(< base 99)) 'triple-hit)
			((and (> base 98)(< base 100)) 'home-run)
		 )
	)	
);define
(define (soz-random)
	(let ((base (random 100)))
		 (cond 
		 	((< base 50) 'ball)
			((and (> base 49)(< base 88)) 'strike)
      ((and (> base 87)(< base 90)) 'four-ball)
			((and (> base 89)(< base 95)) 'single-hit)
			((and (> base 94)(< base 97)) 'double-hit)
			((and (> base 96)(< base 99)) 'triple-hit)
			((and (> base 98)(< base 100)) 'home-run)
		 )
	)	
);define

(make-pair atomic-models 'sbb)

(send sbb def-state
  '(
      strategy        
      ball-count
      strike-count
      out-count
      points
      processing-time  
    )
)

(send sbb set-s
    (make-state 'sigma        'inf
                'phase        'passive
                'strategy     '()
                'ball-count    0
      			'strike-count  0
      			'out-count     0
      			'points        0
                'processing-time 5
    )
)

(define (ex-sbb s e x)
       (case (content-port  x)
             ('pitch (case (state-phase s)
                ('passive 
                  (set! (state-strategy s)(content-value x))
                  (hold-in 'none (state-processing-time s))
                )
                ('busy (continue))
               );case
             )
      );case
)

(define (ball-case s x)
    (case x
       ('passive (passivate))
       ('four-ball (case(state-phase s)
          ('none    (hold-in '1st  (state-processing-time s)))
          ('1st     (hold-in '1st-2nd  (state-processing-time s)))
          ('1st-2nd (hold-in '2nd-3rd  (state-processing-time s)))
          ('1st-3rd (hold-in '2nd  (state-processing-time s))
                    (set! (state-points s)(+ (state-points s) 1)) 
          )
          ('2nd     (hold-in '3rd  (state-processing-time s)))
          ('2nd-3rd (hold-in '3rd  (state-processing-time s))
                    (set! (state-points s)(+ (state-points s) 1))
          )
          ('3rd     (hold-in '1st  (state-processing-time s))
                    (set! (state-points s)(+ (state-points s) 1))
          )
          ('full-base (hold-in 'full-base  (state-processing-time s))
                      (set! (state-points s)(+ (state-points s) 1))
          )
         );case
        (set! (state-strike-count s) 0)
        (set! (state-ball-count s) 0) 
       )
       ('single-hit (case(state-phase s)
          ('none    (hold-in '1st  (state-processing-time s)))
          ('1st     (hold-in '1st-2nd  (state-processing-time s)))
          ('1st-2nd (hold-in '2nd-3rd  (state-processing-time s)))
          ('1st-3rd (hold-in '2nd  (state-processing-time s))
                    (set! (state-points s)(+ (state-points s) 1)) 
          )
          ('2nd     (hold-in '3rd  (state-processing-time s)))
          ('2nd-3rd (hold-in '3rd  (state-processing-time s))
                    (set! (state-points s)(+ (state-points s) 1))
          )
          ('3rd     (hold-in '1st  (state-processing-time s))
                    (set! (state-points s)(+ (state-points s) 1))
          )
          ('full-base (hold-in 'full-base  (state-processing-time s))
                      (set! (state-points s)(+ (state-points s) 1))
          )
         );case
         (set! (state-strike-count s) 0)
         (set! (state-ball-count s) 0) 
       )
       ('double-hit (case(state-phase s)
          ('none    (hold-in '2nd  (state-processing-time s)))
          ('1st     (hold-in '2nd-3rd  (state-processing-time s)))
          ('1st-2nd (hold-in '2nd-3rd  (state-processing-time s))
                    (set! (state-points s)(+ (state-points s) 1)) 
          )
          ('1st-3rd (hold-in '2nd-3rd  (state-processing-time s))
                    (set! (state-points s)(+ (state-points s) 1)) 
          )
          ('2nd     (hold-in '2nd  (state-processing-time s))
                    (set! (state-points s)(+ (state-points s) 2)) 
          )
          ('2nd-3rd (hold-in '2nd  (state-processing-time s))
                    (set! (state-points s)(+ (state-points s) 2))
          )
          ('3rd     (hold-in '2nd  (state-processing-time s))
                    (set! (state-points s)(+ (state-points s) 2))
          )
          ('full-base (hold-in '2nd-3rd  (state-processing-time s))
                      (set! (state-points s)(+ (state-points s) 2))
          )
         );case
        (set! (state-strike-count s) 0)
        (set! (state-ball-count s) 0) 
       )
       ('triple-hit (case(state-phase s)
          ('none    (hold-in '3rd  (state-processing-time s)))
          ('1st     (hold-in '3rd  (state-processing-time s))
                    (set! (state-points s)(+ (state-points s) 1)) 
          )
          ('1st-2nd (hold-in '3rd  (state-processing-time s))
                    (set! (state-points s)(+ (state-points s) 2)) 
          )
          ('1st-3rd (hold-in '3rd  (state-processing-time s))
                    (set! (state-points s)(+ (state-points s) 2)) 
          )
          ('2nd     (hold-in '3rd  (state-processing-time s))
                    (set! (state-points s)(+ (state-points s) 1)) 
          )
          ('2nd-3rd (hold-in '3rd  (state-processing-time s))
                    (set! (state-points s)(+ (state-points s) 2))
          )
          ('3rd     (hold-in '3rd  (state-processing-time s))
                    (set! (state-points s)(+ (state-points s) 1))
          )
          ('full-base (hold-in '3rd  (state-processing-time s))
                      (set! (state-points s)(+ (state-points s) 3))
          )
         );case
        (set! (state-strike-count s) 0)
        (set! (state-ball-count s) 0) 
       )
       ('home-run (case(state-phase s)
          ('none    (hold-in 'none  (state-processing-time s))
                    (set! (state-points s)(+ (state-points s) 1)) 
          )
          ('1st     (hold-in 'none  (state-processing-time s))
                    (set! (state-points s)(+ (state-points s) 2)) 
          )
          ('1st-2nd (hold-in 'none  (state-processing-time s))
                    (set! (state-points s)(+ (state-points s) 3)) 
          )
          ('1st-3rd (hold-in 'none  (state-processing-time s))
                    (set! (state-points s)(+ (state-points s) 3)) 
          )
          ('2nd     (hold-in 'none  (state-processing-time s))
                    (set! (state-points s)(+ (state-points s) 2)) 
          )
          ('2nd-3rd (hold-in 'none (state-processing-time s))
                    (set! (state-points s)(+ (state-points s) 3))
          )
          ('3rd     (hold-in 'none  (state-processing-time s))
                    (set! (state-points s)(+ (state-points s) 2))
          )
          ('full-base (hold-in 'none  (state-processing-time s))
                      (set! (state-points s)(+ (state-points s) 4))
          )
         );case
        (set! (state-strike-count s) 0)
        (set! (state-ball-count s) 0) 
       )
       ('ball (set! (state-ball-count s) (+ (state-ball-count s) 1)))
       ('strike (set! (state-strike-count s) (+ (state-strike-count s) 1)))
      );case
);define

(define (in-sbb s)
  (case (state-strategy s)
      ('fiz (ball-case s (fiz-random)))
      ('foz (ball-case s (foz-random)))
      ('siz (ball-case s (siz-random)))
      ('soz (ball-case s (soz-random)))
  );case
  (if (= 4 (state-ball-count s))
    (begin
    (case (state-phase s)
      ('none    (hold-in '1st  (state-processing-time s)))
      ('1st     (hold-in '1st-2nd  (state-processing-time s)))
      ('1st-2nd (hold-in 'full-base  (state-processing-time s)))
      ('1st-3rd (hold-in '1st-2nd  (state-processing-time s))
            (set! (state-points s) (+ (state-points s) 1))
      )
      ('2nd     (hold-in '1st-3rd  (state-processing-time s)))
      ('2nd-3rd (hold-in '1st-3rd  (state-processing-time s))
            (set! (state-points s) (+ (state-points s) 1))
      )
      ('3rd     (hold-in '1st  (state-processing-time s))
            (set! (state-points s) (+ (state-points s) 1))
      )
      ('full-base (hold-in 'full-base  (state-processing-time s))
            (set! (state-points s) (+ (state-points s) 1))
      )
    );case
    (set! (state-strike-count s) 0)
    (set! (state-ball-count s) 0)
    )
  )
  (if (= 3 (state-strike-count s))
    (begin
        (hold-in (state-phase s) (state-processing-time s))
      (set! (state-out-count s) (+ (state-out-count s) 1))
      (set! (state-strike-count s) 0)
      (set! (state-ball-count s) 0)
    )
  ) 
  (if (= 3 (state-out-count s))
        (passivate)
  )
);define

(define (out-sbb s)
	(case (state-phase s)
   		('passive (set! (state-ball-count s) 0)
                (set! (state-strike-count s) 0)
                (set! (state-out-count s) 0) 
                (make-content 'port 'out 'value (state-points s))        
      )
 		(else (make-content))
 	)
)

(send sbb set-ext-transfn ex-sbb)
(send sbb set-int-transfn in-sbb)
(send sbb set-outputfn out-sbb)

