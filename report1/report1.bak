(define stack '())
(define (push x)
  (set! stack(cons x stack))
  stack
)
(define (pop)
  (cond
    ((null? stack) '())
    (else
      (let ((x (car stack)))
        (set! stack(cdr stack))
       x
      );let
    )
  );cond
);define

(define queue '())
(define (insert x)
  (set! queue (append queue (list x)))
  queue
)
(define (extract)
  (cond
    ((null? queue) '())
    (else
      (let ((x (car queue)))
        (set! queue (cdr queue))
        x
      );let
    );else
  );cond
);define

(define (sequential-search-1 x lst)
  (let loop ((temp-lst lst))
    (cond 
      ((null? temp-lst) '())
      ((equal? x (car temp-lst)) x)
      (else (loop(cdr temp-lst)))
    );cond
  );let
);;define

(define (rac lst)
  (cond
    ((null? (cdr lst)) (car lst))
    (else (rac (cdr lst)))
  );cond
)

(define (search x lst)
  (cond
    ((null? lst) lst)
    ((equal? x (car lst)) x)
    (else (search x (cdr lst)))
  );cond
);define
